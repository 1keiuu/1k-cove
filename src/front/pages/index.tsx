import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import styled from 'styled-components';
import Header from '../components/layouts/Header';

const Home: NextPage = () => {
  const _Main = styled('main')({
    display: 'flex',
  });
  const _Left = styled('div')({
    background: 'white',
    width: '65%',
    zIndex: 2,
  });
  const _Right = styled('div')({
    background: 'white',
    width: '35%',
  });
  const _Section = styled('div')({
    height: '100vh',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  });
  const _ImageWrapper = styled('div')({
    height: '65vh',
    width: '25vw',
    background: 'transparent',
    borderRadius: '110px',
    overflowY: 'auto',
    position: 'fixed',
    top: '50%',
    left: '65%',
    transform: 'translateY(-50%)',
    '-webkit-transform': 'translateY(-50%)',
    '-ms-transform': 'translateY(-50%)',
    margin: 'auto',
    '::-webkit-scrollbar': {
      display: 'none',
    },
  });
  const _AnchorList = styled('ul')({});
  const _AnchorListItem = styled('li')({});
  const _Overlay = styled('div')({
    width: '100%',
    height: '100%',
    position: 'fixed',
    top: 0,
    left: 0,
    background: 'transparent',
    zIndex: 1,
  });
  const _Image = styled('img')({
    height: '100vh',
  });
  let currentSectionIndex = 1;

  /**
   * - sectionIndexに合わせてImageWrapperのborder-radiusを変化させる
   * @params sectionIndex
   */
  const transformImageWrapper = useCallback((sectionIndex: number) => {
    const radiusMap: { [key: number]: { [key: string]: string } } = {
      1: {
        topLeft: '110px',
        topRight: '110px',
        bottomRight: '110px',
        bottomLeft: '110px',
      },
      2: {
        topLeft: '340px',
        topRight: '20px',
        bottomRight: '90px',
        bottomLeft: '210px',
      },
      3: {
        topLeft: '10px',
        topRight: '250px',
        bottomRight: '100px',
        bottomLeft: '350px',
      },
    };
    const radius = radiusMap[sectionIndex];
    if (!ImageWrapperRef.current || !radius) return;
    ImageWrapperRef.current.style.transition = 'border-radius 0.7s ease-in';
    ImageWrapperRef.current.style.borderTopLeftRadius = radius.topLeft;
    ImageWrapperRef.current.style.borderTopRightRadius = radius.topRight;
    ImageWrapperRef.current.style.borderBottomRightRadius = radius.bottomRight;
    ImageWrapperRef.current.style.borderBottomLeftRadius = radius.bottomLeft;
  }, []);

  /**
   * scrollイベントが発火した際のhandler
   */
  const handleScroll = () => {
    // scroll量(offset)に合わせて画像の方もscrollする
    const offset = window.pageYOffset;
    ImageWrapperRef.current?.scrollTo(0, offset);
    // windowの縦幅=sectionの縦幅
    const windowHeight = window.innerHeight;
    // sectionを跨いでいない時はスキップ
    const bottom = windowHeight * currentSectionIndex;
    const top = windowHeight * (currentSectionIndex - 1);
    if (bottom > offset && top < offset) return;
    // sectionを跨いだ際にImageWrapperのborder-radiusを変化させる
    // 下方向に跨いだ際
    if (offset > bottom) {
      currentSectionIndex++;
      transformImageWrapper(currentSectionIndex);
      return;
    }
    // // 上方向に跨いだ際
    // 上方向に跨いだ際(currentSectionIndex=1の時は発火させない)
    if (currentSectionIndex > 1) {
      if (windowHeight * (currentSectionIndex - 1) >= offset) {
        currentSectionIndex--;
        transformImageWrapper(currentSectionIndex);
        return;
      }
    }
  };

  /**
   * 指定したselectorに合致するElementまでscrollする
   * @param sectionIndex 移動するsectionのindex
   */
  const scrollTo = (sectionIndex: number, selector: string) => {
    const offset =
      (document.querySelector(selector) as HTMLElement).offsetTop + 10;
    if (!offset) return;
    window.scrollTo(0, offset);
    currentSectionIndex = sectionIndex;
  };

  useEffect(() => {
    window.addEventListener('scroll', () => {
      handleScroll();
    });
    return () => {
      window.removeEventListener('scroll', () => {
        handleScroll();
      });
    };
  }, []);

  const ImageWrapperRef = useRef<HTMLDivElement>(null);
  const MainRef = useRef<HTMLElement>(null);

  return (
    <main ref={MainRef}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header handleItemClick={scrollTo}></Header>
      <_Main>
        <_Overlay></_Overlay>
        <_Left>
          <_Section>
            <p>Hi Im Ikkei Harashima</p>
            <_AnchorList>
              <_AnchorListItem>
                <a
                  onClick={() => {
                    scrollTo(2, '#about');
                  }}
                >
                  ABOUT
                </a>
              </_AnchorListItem>
              <_AnchorListItem>
                <a
                  onClick={() => {
                    scrollTo(3, '#career');
                  }}
                >
                  CAREER
                </a>
              </_AnchorListItem>
            </_AnchorList>
          </_Section>
          <_Section id="about">
            <p>Hi Im Ikkei Harashima</p>
          </_Section>
          <_Section id="career">
            <p>Hi Im Ikkei Harashima</p>
          </_Section>
        </_Left>
        <_Right>
          <_ImageWrapper ref={ImageWrapperRef}>
            <_Image src="https://1k-cove.com/_nuxt/img/1.108e26d.webp"></_Image>
            <_Image src="https://1k-cove.com/_nuxt/img/2.05ea9ce.webp"></_Image>
            <_Image src="https://1k-cove.com/_nuxt/img/1.108e26d.webp"></_Image>
          </_ImageWrapper>
        </_Right>
      </_Main>

      <footer>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by
          <span>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </main>
  );
};

export default Home;
